---
import Layout from "../layouts/Layout.astro";
import Navigation from '../components/Navigation.astro';
import "@fontsource/press-start-2p";
import "@fontsource/vt323";

// Define the blog posts manually since we're using the pages approach
const blogPosts = [
  {
    slug: "2025-03-31",
    title: "Introducing Cortex 2.0: Faster, Better, Stronger",
    date: "31-Mar-2025",
    author: "Cortex Team",
    description: "We're excited to announce the release of Cortex 2.0, featuring significant performance improvements and new capabilities.",
    tags: ["Release", "Performance", "LLM"]
  },
  {
    slug: "2025-03-18",
    title: "CPU Inference Optimizations",
    date: "18-Mar-2025", 
    author: "Cortex Team",
    description: "Discover techniques to optimize LLM inference on CPU-only machines for better performance.",
    tags: ["CPU", "Performance", "Optimization"]
  }
];

// Featured post is first in array
const featuredPost = blogPosts[0];
const regularPosts = blogPosts.slice(1);

// Dummy posts for filling the grid
const dummyPosts = [
  {
    slug: "#",
    title: "Fine-tuning LLMs for Your Use Case",
    date: "25-Mar-2025",
    description: "Learn how to fine-tune large language models with your custom data...",
    tag: "LLM"
  },
  {
    slug: "#",
    title: "Building Applications with Cortex API",
    date: "12-Mar-2025",
    description: "A step-by-step guide to building applications using our API...",
    tag: "API"
  },
  {
    slug: "#",
    title: "Retrieval-Augmented Generation with Cortex",
    date: "05-Mar-2025",
    description: "Implementing RAG systems for accurate and contextual responses...",
    tag: "RAG"
  },
  {
    slug: "#",
    title: "GPU Recommendations for Local LLMs",
    date: "28-Feb-2025",
    description: "Our guide to selecting the right GPU for running various models...",
    tag: "GPU"
  },
  {
    slug: "#",
    title: "Function Calling with Local Models",
    date: "21-Feb-2025",
    description: "How to implement function calling capabilities with local models...",
    tag: "Tools"
  }
];

// Fill remaining spots with dummy posts if needed
while (regularPosts.length < 5) {
  const dummyPost = dummyPosts[regularPosts.length];
  if (dummyPost) {
    regularPosts.push(dummyPost);
  } else {
    break;
  }
}
---

<Layout title="Blog - Cortex">
  <div class="container">
    <Navigation activeTab="blog" />
    
    <main>
      <section class="hero">
        <h1 class="page-title">Cortex Blog</h1>
        <p class="subtitle">Latest news, updates, and insights from the Cortex team</p>
      </section>
      
      <section class="featured-post">
        <div class="terminal">
          <div class="terminal-header">
            <span class="dot red"></span>
            <span class="dot yellow"></span>
            <span class="dot green"></span>
          </div>
          <div class="terminal-content">
            <h2>{featuredPost.title}</h2>
            <div class="post-meta">
              <span class="date">{featuredPost.date}</span>
              <span class="author">by {featuredPost.author}</span>
            </div>
            <p>{featuredPost.description}</p>
            <a href={`/blog/${featuredPost.slug}`} class="read-more">READ MORE</a>
          </div>
        </div>
      </section>
      
      <section class="blog-posts">
        {regularPosts.map(post => (
          <article class="post-card">
            <div class="card-tag">{post.tags?.[0] || post.tag || "POST"}</div>
            <div class="post-content">
              <h3>{post.title}</h3>
              <div class="post-meta">
                <span class="date">{post.date}</span>
              </div>
              <p class="post-excerpt">{post.description}</p>
            </div>
            <a href={post.slug.startsWith('#') ? post.slug : `/blog/${post.slug}`} class="card-link" aria-label={`Read more about ${post.title}`}></a>
          </article>
        ))}
      </section>
      
      <section class="code-example">
        <h2>Quick Start Code Example</h2>
        <div class="code-block-container">
          <pre><code class="language-bash">
# Install Cortex
pip install cortexcpp

# Initialize with your first model
cortex pull llama3

# Start serving
cortex serve --model llama3
          </code></pre>
          <button class="copy-btn" data-command="pip install cortexcpp
cortex pull llama3
cortex serve --model llama3">
            <span class="copy-icon">ðŸ“‹</span>
          </button>
        </div>
      </section>
    </main>
  </div>
</Layout>

<style>
  .container {
    background: #202020;
    min-height: 100vh;
    color: #98cbf9;
    font-family: "VT323", monospace;
    padding: 2rem;
    position: relative;
  }
  
  main {
    padding-top: 80px;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .hero {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  .page-title {
    font-family: "Press Start 2P", cursive;
    font-size: 2.5rem;
    color: #98cbf9;
    margin-bottom: 1rem;
    text-shadow: 0 0 10px rgba(152, 203, 249, 0.5);
    animation: glow 2s ease-in-out infinite alternate;
  }
  
  .subtitle {
    font-size: 1.5rem;
    opacity: 0.8;
    max-width: 800px;
    margin: 0 auto;
  }
  
  @keyframes glow {
    from {
      text-shadow: 0 0 5px rgba(152, 203, 249, 0.5);
    }
    to {
      text-shadow: 0 0 20px rgba(152, 203, 249, 0.8);
    }
  }
  
  .featured-post {
    margin-bottom: 4rem;
  }
  
  .terminal {
    background: #000;
    border-radius: 10px;
    border: 2px solid #98cbf9;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(152, 203, 249, 0.2);
  }
  
  .terminal-header {
    background: #1a1a1a;
    padding: 0.8rem;
    display: flex;
    gap: 8px;
    align-items: center;
  }
  
  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }
  
  .red {
    background: #ff5f56;
  }
  .yellow {
    background: #ffbd2e;
  }
  .green {
    background: #27c93f;
  }
  
  .terminal-content {
    padding: 2rem;
  }
  
  .terminal-content h2 {
    font-family: "Press Start 2P", cursive;
    font-size: 1.5rem;
    margin-top: 0;
    margin-bottom: 1rem;
  }
  
  .post-meta {
    display: flex;
    gap: 1rem;
    font-size: 1.1rem;
    opacity: 0.8;
    margin-bottom: 1.5rem;
  }
  
  .read-more {
    display: inline-block;
    background: #98cbf9;
    color: #000;
    font-family: "Press Start 2P", cursive;
    font-size: 0.8rem;
    padding: 0.8rem 1rem;
    border-radius: 5px;
    text-decoration: none;
    margin-top: 1.5rem;
    transition: all 0.3s ease;
  }
  
  .read-more:hover {
    transform: translateY(-3px);
    box-shadow: 0 0 15px rgba(152, 203, 249, 0.5);
  }
  
  .blog-posts {
    margin-bottom: 4rem;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }
  
  .post-card {
    background: #111;
    border: 2px solid #98cbf9;
    border-radius: 8px;
    overflow: hidden;
    position: relative;
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(152, 203, 249, 0.3);
    border-color: #fff;
  }
  
  .card-tag {
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: "Press Start 2P", cursive;
    font-size: 3rem;
    color: #98cbf9;
    padding: 1.5rem;
    background-color: #0a0a0a;
    border-bottom: 1px solid rgba(152, 203, 249, 0.3);
    height: 150px;
  }
  
  .post-content {
    padding: 1.2rem;
    flex: 1;
  }
  
  .post-card h3 {
    font-family: "Press Start 2P", cursive;
    font-size: 1rem;
    margin-top: 0;
    margin-bottom: 0.8rem;
  }
  
  .post-excerpt {
    font-size: 1rem;
    opacity: 0.8;
    margin-bottom: 0;
  }
  
  .card-link {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
  
  .code-example {
    margin-top: 3rem;
  }
  
  .code-example h2 {
    font-family: "Press Start 2P", cursive;
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .code-block-container {
    position: relative;
    margin-bottom: 2rem;
  }
  
  .code-block-container pre {
    margin: 0;
    padding: 1.5rem;
    background: #000;
    border: 2px solid #98cbf9;
    border-radius: 10px;
    overflow-x: auto;
  }
  
  .code-block-container code {
    font-family: monospace;
    color: #98cbf9;
    font-size: 1rem;
    line-height: 1.6;
  }
  
  .copy-btn {
    position: absolute;
    top: 0.8rem;
    right: 0.8rem;
    background: rgba(0, 0, 0, 0.6);
    border: 1px solid rgba(152, 203, 249, 0.5);
    border-radius: 5px;
    color: #98cbf9;
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.4rem;
    z-index: 10;
  }
  
  .copy-btn:hover {
    transform: scale(1.1);
    color: #fff;
    border-color: #fff;
  }
  
  .copy-btn.copied {
    color: #4CAF50;
    border-color: #4CAF50;
  }
  
  @media (max-width: 1024px) {
    .blog-posts {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 768px) {
    .page-title {
      font-size: 2rem;
    }
    
    .subtitle {
      font-size: 1.2rem;
    }
    
    .terminal-content h2 {
      font-size: 1.2rem;
    }
  }
  
  @media (max-width: 580px) {
    .page-title {
      font-size: 1.5rem;
    }
    
    .subtitle {
      font-size: 1rem;
    }
    
    .terminal-content {
      padding: 1.5rem;
    }
    
    .terminal-content h2 {
      font-size: 1rem;
    }
    
    .blog-posts {
      grid-template-columns: 1fr;
    }
    
    .post-card h3 {
      font-size: 0.9rem;
    }
    
    .card-tag {
      font-size: 2.5rem;
      height: 120px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Add copy functionality to code block copy buttons
    const copyButtons = document.querySelectorAll('.copy-btn');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const command = button.getAttribute('data-command');
        if (command) {
          navigator.clipboard.writeText(command).then(() => {
            // Visual feedback for copy success
            button.classList.add('copied');
            const iconElement = button.querySelector('.copy-icon');
            if (iconElement) {
              iconElement.textContent = 'âœ“';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.classList.remove('copied');
                iconElement.textContent = 'ðŸ“‹';
              }, 2000);
            }
          });
        }
      });
    });
  });
</script>
