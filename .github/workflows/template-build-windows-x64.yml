name: build-windows-x64
on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        default: 'refs/heads/main'
      public_provider:
        required: true
        type: string
        default: none
        description: 'none: build only, github: build and publish to github, aws s3: build and publish to aws s3'
      new_version:
        required: true
        type: string
        default: ''
      upload_url:
        required: false
        type: string
        default: ''
      runs-on:
        required: false
        type: string
        default: 'windows-cuda-12-0'
        description: 'The runner to use for this job'
      cmake-flags:
        required: false
        type: string
        default: ''
        description: 'The cmake flags to use for this job'
      build-deps-cmake-flags:
        required: false
        type: string
        default: ''
        description: 'The cmake flags to use for this job'
      ccache-dir:
        required: false
        type: string
        default: 'C:\Users\ContainerAdministrator\AppData\Local\ccache'
        description: 'The ccache directory to use for this job'
      channel:
        required: true
        type: string
        default: 'nightly'
        description: 'The channel to use for this job'
      llamacpp-version:
        required: true
        type: string
        default: '0.0.0'
        description: 'The version of cortex-llamacpp to use for this job'
    secrets:
      MINIO_BUCKET_NAME:
        required: false
      MINIO_ENDPOINT:
        required: false
      MINIO_ACCESS_KEY_ID:
        required: false
      MINIO_SECRET_ACCESS_KEY:
        required: false
      MINIO_REGION:
        required: false
      DEVELOPER_ID:
        required: false
      AZURE_KEY_VAULT_URI:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_SECRET:
        required: false
      AZURE_CERT_NAME:
        required: false
      DELTA_AWS_S3_BUCKET_NAME:
        required: false
      DELTA_AWS_ACCESS_KEY_ID:
        required: false
      DELTA_AWS_SECRET_ACCESS_KEY:
        required: false
      DELTA_AWS_REGION:
        required: false

jobs:
  build-windows-x64:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
          submodules: 'recursive'

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Set output params for each channel
        id : set-output-params
        shell: bash
        run: |
          # Set output for stable channel
          if [ "${{ inputs.channel }}" == "stable" ]; then
            echo "::set-output name=package_name::cortexcpp"
            echo "::set-output name=destination_binary_name::cortex"
            echo "::set-output name=destination_binary_server_name::cortex-server"
            echo "::set-output name=data_folder_name::cortexcpp"
            echo "::set-output name=configuration_file_name::.cortexrc"
            echo "::set-output name=uninstaller_file_name::cortex-uninstall.sh"
            echo "::set-output name=iss_file_name::installer.iss"
            echo "::set-output name=local_iss_file_name::local-installer.iss"
          fi

          # Set output for beta channel
          if [ "${{ inputs.channel }}" == "beta" ]; then
            echo "::set-output name=package_name::cortexcpp-beta"
            echo "::set-output name=destination_binary_name::cortex-beta"
            echo "::set-output name=destination_binary_server_name::cortex-server-beta"
            echo "::set-output name=data_folder_name::cortexcpp-beta"
            echo "::set-output name=configuration_file_name::.cortexrc-beta"
            echo "::set-output name=uninstaller_file_name::cortex-beta-uninstall.sh"
            echo "::set-output name=iss_file_name::installer-beta.iss"
            echo "::set-output name=local_iss_file_name::local-installer-beta.iss"
          fi

          # Set output for nightly channel
          if [ "${{ inputs.channel }}" == "nightly" ]; then
            echo "::set-output name=package_name::cortexcpp-nightly"
            echo "::set-output name=destination_binary_name::cortex-nightly"
            echo "::set-output name=destination_binary_server_name::cortex-server-nightly"
            echo "::set-output name=data_folder_name::cortexcpp-nightly"
            echo "::set-output name=configuration_file_name::.cortexrc-nightly"
            echo "::set-output name=uninstaller_file_name::cortex-nightly-uninstall.sh"
            echo "::set-output name=iss_file_name::installer-nightly.iss"
            echo "::set-output name=local_iss_file_name::local-installer-nightly.iss"
          fi

      - name: Install jq
        uses: dcarbone/install-jq-action@v2.0.1

      - name: Install dependencies on Windows
        run: |
          choco install make pkgconfiglite ccache awscli 7zip ninja wget -y
          dotnet tool install --global AzureSignTool

      - name: Download ccache from s3
        continue-on-error: true
        run: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          aws s3 sync s3://${{ secrets.MINIO_BUCKET_NAME }}/cortex-cpp-windows-amd64 ${{ inputs.ccache-dir }}  --endpoint ${{ secrets.MINIO_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          AWS_DEFAULT_REGION: "${{ secrets.MINIO_REGION }}"

      - name: Configure vcpkg
        shell: cmd
        run: |
          cd engine
          make configure-vcpkg

      - name: Build
        run: |
          cd engine
          make build CMAKE_EXTRA_FLAGS="${{ inputs.cmake-flags }}" BUILD_DEPS_CMAKE_EXTRA_FLAGS="${{ inputs.build-deps-cmake-flags }}"

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
          
      - name: Pre-package
        run: |
          cd engine
          make pre-package DESTINATION_BINARY_NAME="${{ steps.set-output-params.outputs.destination_binary_name }}" DESTINATION_BINARY_SERVER_NAME="${{ steps.set-output-params.outputs.destination_binary_server_name }}"

      - name: Code Signing binaries
        run: |
          cd engine
          make codesign-binary DESTINATION_BINARY_NAME="${{ steps.set-output-params.outputs.destination_binary_name }}" DESTINATION_BINARY_SERVER_NAME="${{ steps.set-output-params.outputs.destination_binary_server_name }}" AZURE_KEY_VAULT_URI="${{ secrets.AZURE_KEY_VAULT_URI }}" AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}" AZURE_CERT_NAME="${{ secrets.AZURE_CERT_NAME }}"

      - name: Update version in installer.iss using sed
        shell: bash
        run: |
          cd engine/templates/windows
          sed -i "s/AppVersion=1.0/AppVersion=${{ inputs.new_version }}/g" ${{ steps.set-output-params.outputs.iss_file_name }}
          sed -i "s/AppVersion=1.0/AppVersion=${{ inputs.new_version }}/g" ${{ steps.set-output-params.outputs.local_iss_file_name }}
          cat ${{ steps.set-output-params.outputs.iss_file_name }}
          cp ${{ steps.set-output-params.outputs.iss_file_name }} ../../../
          cp ${{ steps.set-output-params.outputs.local_iss_file_name }} ../../../
          ls ../../../

      - name: Build network Installers
        shell: bash
        run: |
          cd engine
          make build-installer PACKAGE_NAME=${{ steps.set-output-params.outputs.package_name }} VERSION=${{ inputs.new_version }} DESTINATION_BINARY_NAME="${{ steps.set-output-params.outputs.destination_binary_name }}" DESTINATION_BINARY_SERVER_NAME="${{ steps.set-output-params.outputs.destination_binary_server_name }}"
          ls ../

      - name: Build local Installers
        shell: powershell
        run: |
          mkdir dependencies
          cd dependencies
          # wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx-cuda-cu11.7-x64.tar.gz
          # wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx-cuda-cu12.0-x64.tar.gz
          # wget.exe https://github.com/ggml-org/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx-x64.zip
          wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx2-cuda-cu11.7-x64.tar.gz
          wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx2-cuda-cu12.0-x64.tar.gz
          wget.exe https://github.com/ggml-org/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx2-x64.zip
          # wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx512-cuda-cu11.7-x64.tar.gz
          # wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx512-cuda-cu12.0-x64.tar.gz
          # wget.exe https://github.com/ggml-org/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-avx512-x64.zip
          wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-noavx-cuda-cu11.7-x64.tar.gz
          wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-noavx-cuda-cu12.0-x64.tar.gz
          wget.exe https://github.com/ggml-org/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-noavx-x64.zip
          wget.exe https://github.com/ggml-org/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/llama-${{ inputs.llamacpp-version }}-bin-win-vulkan-x64.zip
          wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/cudart-llama-bin-win-cu11.7-x64.tar.gz
          wget.exe https://github.com/menloresearch/llama.cpp/releases/download/${{ inputs.llamacpp-version }}/cudart-llama-bin-win-cu12.0-x64.tar.gz

      - name: Enable long paths
        run: |
          reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f

      - name: Compile .ISS to .EXE network Installer
        uses: nadeemjazmawe/inno-setup-action-cli@v6.0.5
        with:
          filepath: ./${{ steps.set-output-params.outputs.iss_file_name }}

      - name: Codesign for windows network installer
        shell: pwsh
        run: |
          ~\.dotnet\tools\azuresigntool.exe sign -kvu ${{ secrets.AZURE_KEY_VAULT_URI }} -kvi ${{ secrets.AZURE_CLIENT_ID }} -kvt ${{ secrets.AZURE_TENANT_ID }} -kvs ${{ secrets.AZURE_CLIENT_SECRET }} -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.globalsign.com/tsa/r6advanced1 -v ".\setup.exe"
          mv .\setup.exe .\network-setup.exe

      - name: Compile .ISS to .EXE local Installer
        uses: nadeemjazmawe/inno-setup-action-cli@v6.0.5
        with:
          filepath: ./${{ steps.set-output-params.outputs.local_iss_file_name }}

      - name: Codesign for windows network installer
        shell: pwsh
        run: |
          ~\.dotnet\tools\azuresigntool.exe sign -kvu ${{ secrets.AZURE_KEY_VAULT_URI }} -kvi ${{ secrets.AZURE_CLIENT_ID }} -kvt ${{ secrets.AZURE_TENANT_ID }} -kvs ${{ secrets.AZURE_CLIENT_SECRET }} -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.globalsign.com/tsa/r6advanced1 -v ".\setup.exe"
          mv .\setup.exe .\local-setup.exe

      - name: Package
        run: |
          cd engine
          make package

      - name: Upload Artifact 
        uses: actions/upload-artifact@v4
        with:
          name: cortex-${{ inputs.new_version }}-windows-amd64
          path: ./engine/cortex

      - name: Upload Artifact network installer
        uses: actions/upload-artifact@v4
        with:
          name: cortex-${{ inputs.new_version }}-windows-amd64-network-installer
          path: ./network-setup.exe
      
      - name: Upload Artifact local installer
        uses: actions/upload-artifact@v4
        with:
          name: cortex-${{ inputs.new_version }}-windows-amd64-local-installer
          path: ./local-setup.exe

      - name: upload to aws s3 if public provider is aws
        if: inputs.public_provider == 'aws-s3'
        run: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          aws s3 cp ./engine/cortex.tar.gz s3://${{ secrets.DELTA_AWS_S3_BUCKET_NAME }}/cortex/temp-latest/windows-amd64-cortex-nightly.tar.gz
          aws s3 cp ./network-setup.exe s3://${{ secrets.DELTA_AWS_S3_BUCKET_NAME }}/cortex/temp-latest/cortex-windows-amd64-network-installer.exe

          aws s3 cp ./engine/cortex.tar.gz s3://${{ secrets.DELTA_AWS_S3_BUCKET_NAME }}/cortex/v${{ inputs.new_version }}/windows-amd64/cortex-nightly.tar.gz
          aws s3 cp ./network-setup.exe s3://${{ secrets.DELTA_AWS_S3_BUCKET_NAME }}/cortex/v${{ inputs.new_version }}/windows-amd64/cortex-${{ inputs.new_version }}-windows-amd64-network-installer.exe
          aws s3 cp ./local-setup.exe s3://${{ secrets.DELTA_AWS_S3_BUCKET_NAME }}/cortex/v${{ inputs.new_version }}/windows-amd64/cortex-${{ inputs.new_version }}-windows-amd64-local-installer.exe
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DELTA_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DELTA_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.DELTA_AWS_REGION }}
          AWS_EC2_METADATA_DISABLED: "true"

      - name: Upload release assert if public provider is github
        if: inputs.public_provider == 'github'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./engine/cortex.tar.gz
          asset_name: cortex-${{ inputs.new_version }}-windows-amd64.tar.gz
          asset_content_type: application/zip

      - name: Upload release assert if public provider is github
        if: inputs.public_provider == 'github'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./network-setup.exe
          asset_name: cortex-${{ inputs.new_version }}-windows-amd64-network-installer.exe
          asset_content_type: application/octet-stream

      - name: Upload release assert if public provider is github
        if: inputs.public_provider == 'github'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./local-setup.exe
          asset_name: cortex-${{ inputs.new_version }}-windows-amd64-local-installer.exe
          asset_content_type: application/octet-stream